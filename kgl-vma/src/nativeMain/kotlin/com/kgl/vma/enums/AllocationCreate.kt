package com.kgl.vma.enums

import com.kgl.vma.utils.*
import cvma.*


actual enum class AllocationCreate(override val value: UInt) : VmaFlag<AllocationCreate> {
	DEDICATED_MEMORY(VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT),
	NEVER_ALLOCATE(VMA_ALLOCATION_CREATE_NEVER_ALLOCATE_BIT),
	MAPPED(VMA_ALLOCATION_CREATE_MAPPED_BIT),
	CAN_BECOME_LOST(VMA_ALLOCATION_CREATE_CAN_BECOME_LOST_BIT),
	CAN_MAKE_OTHER_LOST(VMA_ALLOCATION_CREATE_CAN_MAKE_OTHER_LOST_BIT),
	USER_DATA_COPY_STRING(VMA_ALLOCATION_CREATE_USER_DATA_COPY_STRING_BIT),
	UPPER_ADDRESS(VMA_ALLOCATION_CREATE_UPPER_ADDRESS_BIT),
	DONT_BIND(VMA_ALLOCATION_CREATE_DONT_BIND_BIT),
	STRATEGY_BEST_FIT(VMA_ALLOCATION_CREATE_STRATEGY_BEST_FIT_BIT),
	STRATEGY_WORST_FIT(VMA_ALLOCATION_CREATE_STRATEGY_WORST_FIT_BIT),
	STRATEGY_FIRST_FIT(VMA_ALLOCATION_CREATE_STRATEGY_FIRST_FIT_BIT),
	STRATEGY_MIN_MEMORY(VMA_ALLOCATION_CREATE_STRATEGY_MIN_MEMORY_BIT),
	STRATEGY_MIN_TIME(VMA_ALLOCATION_CREATE_STRATEGY_MIN_TIME_BIT),
	STRATEGY_MIN_FRAGMENTATION(VMA_ALLOCATION_CREATE_STRATEGY_MIN_FRAGMENTATION_BIT);
	
	actual companion object{
		private val enumLookUpMap: Map<UInt, AllocationCreate> =
			enumValues<AllocationCreate>().associateBy { it.value }
		
		fun fromMultiple(value: UInt): VmaFlag<AllocationCreate>? = if (value == 0u) null else VmaFlag(value)
		
		fun from(value: UInt): AllocationCreate = enumLookUpMap[value]!!
	}
}

actual val AllocationCreate.Companion.STRATEGY_MASK: VmaFlag<AllocationCreate>
	get() = VmaFlag(VMA_ALLOCATION_CREATE_STRATEGY_MASK)
