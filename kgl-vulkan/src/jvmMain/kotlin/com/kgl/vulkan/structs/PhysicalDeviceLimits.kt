/**
 * Copyright [2019] [Dominic Fischer]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.kgl.vulkan.structs

import com.kgl.vulkan.enums.SampleCount
import org.lwjgl.vulkan.VkPhysicalDeviceLimits

fun PhysicalDeviceLimits.Companion.from(ptr: VkPhysicalDeviceLimits): PhysicalDeviceLimits = PhysicalDeviceLimits(
		ptr.maxImageDimension1D().toUInt(),
		ptr.maxImageDimension2D().toUInt(),
		ptr.maxImageDimension3D().toUInt(),
		ptr.maxImageDimensionCube().toUInt(),
		ptr.maxImageArrayLayers().toUInt(),
		ptr.maxTexelBufferElements().toUInt(),
		ptr.maxUniformBufferRange().toUInt(),
		ptr.maxStorageBufferRange().toUInt(),
		ptr.maxPushConstantsSize().toUInt(),
		ptr.maxMemoryAllocationCount().toUInt(),
		ptr.maxSamplerAllocationCount().toUInt(),
		ptr.bufferImageGranularity().toULong(),
		ptr.sparseAddressSpaceSize().toULong(),
		ptr.maxBoundDescriptorSets().toUInt(),
		ptr.maxPerStageDescriptorSamplers().toUInt(),
		ptr.maxPerStageDescriptorUniformBuffers().toUInt(),
		ptr.maxPerStageDescriptorStorageBuffers().toUInt(),
		ptr.maxPerStageDescriptorSampledImages().toUInt(),
		ptr.maxPerStageDescriptorStorageImages().toUInt(),
		ptr.maxPerStageDescriptorInputAttachments().toUInt(),
		ptr.maxPerStageResources().toUInt(),
		ptr.maxDescriptorSetSamplers().toUInt(),
		ptr.maxDescriptorSetUniformBuffers().toUInt(),
		ptr.maxDescriptorSetUniformBuffersDynamic().toUInt(),
		ptr.maxDescriptorSetStorageBuffers().toUInt(),
		ptr.maxDescriptorSetStorageBuffersDynamic().toUInt(),
		ptr.maxDescriptorSetSampledImages().toUInt(),
		ptr.maxDescriptorSetStorageImages().toUInt(),
		ptr.maxDescriptorSetInputAttachments().toUInt(),
		ptr.maxVertexInputAttributes().toUInt(),
		ptr.maxVertexInputBindings().toUInt(),
		ptr.maxVertexInputAttributeOffset().toUInt(),
		ptr.maxVertexInputBindingStride().toUInt(),
		ptr.maxVertexOutputComponents().toUInt(),
		ptr.maxTessellationGenerationLevel().toUInt(),
		ptr.maxTessellationPatchSize().toUInt(),
		ptr.maxTessellationControlPerVertexInputComponents().toUInt(),
		ptr.maxTessellationControlPerVertexOutputComponents().toUInt(),
		ptr.maxTessellationControlPerPatchOutputComponents().toUInt(),
		ptr.maxTessellationControlTotalOutputComponents().toUInt(),
		ptr.maxTessellationEvaluationInputComponents().toUInt(),
		ptr.maxTessellationEvaluationOutputComponents().toUInt(),
		ptr.maxGeometryShaderInvocations().toUInt(),
		ptr.maxGeometryInputComponents().toUInt(),
		ptr.maxGeometryOutputComponents().toUInt(),
		ptr.maxGeometryOutputVertices().toUInt(),
		ptr.maxGeometryTotalOutputComponents().toUInt(),
		ptr.maxFragmentInputComponents().toUInt(),
		ptr.maxFragmentOutputAttachments().toUInt(),
		ptr.maxFragmentDualSrcAttachments().toUInt(),
		ptr.maxFragmentCombinedOutputResources().toUInt(),
		ptr.maxComputeSharedMemorySize().toUInt(),
		UIntArray(3) { ptr.maxComputeWorkGroupCount(it).toUInt() },
		ptr.maxComputeWorkGroupInvocations().toUInt(),
		UIntArray(3) { ptr.maxComputeWorkGroupSize(it).toUInt() },
		ptr.subPixelPrecisionBits().toUInt(),
		ptr.subTexelPrecisionBits().toUInt(),
		ptr.mipmapPrecisionBits().toUInt(),
		ptr.maxDrawIndexedIndexValue().toUInt(),
		ptr.maxDrawIndirectCount().toUInt(),
		ptr.maxSamplerLodBias(),
		ptr.maxSamplerAnisotropy(),
		ptr.maxViewports().toUInt(),
		UIntArray(2) { ptr.maxViewportDimensions(it).toUInt() },
		FloatArray(2) { ptr.viewportBoundsRange(it) },
		ptr.viewportSubPixelBits().toUInt(),
		ptr.minMemoryMapAlignment().toULong(),
		ptr.minTexelBufferOffsetAlignment().toULong(),
		ptr.minUniformBufferOffsetAlignment().toULong(),
		ptr.minStorageBufferOffsetAlignment().toULong(),
		ptr.minTexelOffset(),
		ptr.maxTexelOffset().toUInt(),
		ptr.minTexelGatherOffset(),
		ptr.maxTexelGatherOffset().toUInt(),
		ptr.minInterpolationOffset(),
		ptr.maxInterpolationOffset(),
		ptr.subPixelInterpolationOffsetBits().toUInt(),
		ptr.maxFramebufferWidth().toUInt(),
		ptr.maxFramebufferHeight().toUInt(),
		ptr.maxFramebufferLayers().toUInt(),
		SampleCount.fromMultiple(ptr.framebufferColorSampleCounts()),
		SampleCount.fromMultiple(ptr.framebufferDepthSampleCounts()),
		SampleCount.fromMultiple(ptr.framebufferStencilSampleCounts()),
		SampleCount.fromMultiple(ptr.framebufferNoAttachmentsSampleCounts()),
		ptr.maxColorAttachments().toUInt(),
		SampleCount.fromMultiple(ptr.sampledImageColorSampleCounts()),
		SampleCount.fromMultiple(ptr.sampledImageIntegerSampleCounts()),
		SampleCount.fromMultiple(ptr.sampledImageDepthSampleCounts()),
		SampleCount.fromMultiple(ptr.sampledImageStencilSampleCounts()),
		SampleCount.fromMultiple(ptr.storageImageSampleCounts()),
		ptr.maxSampleMaskWords().toUInt(),
		ptr.timestampComputeAndGraphics(),
		ptr.timestampPeriod(),
		ptr.maxClipDistances().toUInt(),
		ptr.maxCullDistances().toUInt(),
		ptr.maxCombinedClipAndCullDistances().toUInt(),
		ptr.discreteQueuePriorities().toUInt(),
		FloatArray(2) { ptr.pointSizeRange(it) },
		FloatArray(2) { ptr.lineWidthRange(it) },
		ptr.pointSizeGranularity(),
		ptr.lineWidthGranularity(),
		ptr.strictLines(),
		ptr.standardSampleLocations(),
		ptr.optimalBufferCopyOffsetAlignment().toULong(),
		ptr.optimalBufferCopyRowPitchAlignment().toULong(),
		ptr.nonCoherentAtomSize().toULong()
)
