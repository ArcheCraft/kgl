/**
 * Copyright [2019] [Dominic Fischer]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.kgl.vulkan.structs

import com.kgl.vulkan.enums.SampleCount
import com.kgl.vulkan.utils.VkFlag

data class PhysicalDeviceLimits(
		val maxImageDimension1D: UInt,
		val maxImageDimension2D: UInt,
		val maxImageDimension3D: UInt,
		val maxImageDimensionCube: UInt,
		val maxImageArrayLayers: UInt,
		val maxTexelBufferElements: UInt,
		val maxUniformBufferRange: UInt,
		val maxStorageBufferRange: UInt,
		val maxPushConstantsSize: UInt,
		val maxMemoryAllocationCount: UInt,
		val maxSamplerAllocationCount: UInt,
		val bufferImageGranularity: ULong,
		val sparseAddressSpaceSize: ULong,
		val maxBoundDescriptorSets: UInt,
		val maxPerStageDescriptorSamplers: UInt,
		val maxPerStageDescriptorUniformBuffers: UInt,
		val maxPerStageDescriptorStorageBuffers: UInt,
		val maxPerStageDescriptorSampledImages: UInt,
		val maxPerStageDescriptorStorageImages: UInt,
		val maxPerStageDescriptorInputAttachments: UInt,
		val maxPerStageResources: UInt,
		val maxDescriptorSetSamplers: UInt,
		val maxDescriptorSetUniformBuffers: UInt,
		val maxDescriptorSetUniformBuffersDynamic: UInt,
		val maxDescriptorSetStorageBuffers: UInt,
		val maxDescriptorSetStorageBuffersDynamic: UInt,
		val maxDescriptorSetSampledImages: UInt,
		val maxDescriptorSetStorageImages: UInt,
		val maxDescriptorSetInputAttachments: UInt,
		val maxVertexInputAttributes: UInt,
		val maxVertexInputBindings: UInt,
		val maxVertexInputAttributeOffset: UInt,
		val maxVertexInputBindingStride: UInt,
		val maxVertexOutputComponents: UInt,
		val maxTessellationGenerationLevel: UInt,
		val maxTessellationPatchSize: UInt,
		val maxTessellationControlPerVertexInputComponents: UInt,
		val maxTessellationControlPerVertexOutputComponents: UInt,
		val maxTessellationControlPerPatchOutputComponents: UInt,
		val maxTessellationControlTotalOutputComponents: UInt,
		val maxTessellationEvaluationInputComponents: UInt,
		val maxTessellationEvaluationOutputComponents: UInt,
		val maxGeometryShaderInvocations: UInt,
		val maxGeometryInputComponents: UInt,
		val maxGeometryOutputComponents: UInt,
		val maxGeometryOutputVertices: UInt,
		val maxGeometryTotalOutputComponents: UInt,
		val maxFragmentInputComponents: UInt,
		val maxFragmentOutputAttachments: UInt,
		val maxFragmentDualSrcAttachments: UInt,
		val maxFragmentCombinedOutputResources: UInt,
		val maxComputeSharedMemorySize: UInt,
		val maxComputeWorkGroupCount: UIntArray,
		val maxComputeWorkGroupInvocations: UInt,
		val maxComputeWorkGroupSize: UIntArray,
		val subPixelPrecisionBits: UInt,
		val subTexelPrecisionBits: UInt,
		val mipmapPrecisionBits: UInt,
		val maxDrawIndexedIndexValue: UInt,
		val maxDrawIndirectCount: UInt,
		val maxSamplerLodBias: Float,
		val maxSamplerAnisotropy: Float,
		val maxViewports: UInt,
		val maxViewportDimensions: UIntArray,
		val viewportBoundsRange: FloatArray,
		val viewportSubPixelBits: UInt,
		val minMemoryMapAlignment: ULong,
		val minTexelBufferOffsetAlignment: ULong,
		val minUniformBufferOffsetAlignment: ULong,
		val minStorageBufferOffsetAlignment: ULong,
		val minTexelOffset: Int,
		val maxTexelOffset: UInt,
		val minTexelGatherOffset: Int,
		val maxTexelGatherOffset: UInt,
		val minInterpolationOffset: Float,
		val maxInterpolationOffset: Float,
		val subPixelInterpolationOffsetBits: UInt,
		val maxFramebufferWidth: UInt,
		val maxFramebufferHeight: UInt,
		val maxFramebufferLayers: UInt,
		val framebufferColorSampleCounts: VkFlag<SampleCount>?,
		val framebufferDepthSampleCounts: VkFlag<SampleCount>?,
		val framebufferStencilSampleCounts: VkFlag<SampleCount>?,
		val framebufferNoAttachmentsSampleCounts: VkFlag<SampleCount>?,
		val maxColorAttachments: UInt,
		val sampledImageColorSampleCounts: VkFlag<SampleCount>?,
		val sampledImageIntegerSampleCounts: VkFlag<SampleCount>?,
		val sampledImageDepthSampleCounts: VkFlag<SampleCount>?,
		val sampledImageStencilSampleCounts: VkFlag<SampleCount>?,
		val storageImageSampleCounts: VkFlag<SampleCount>?,
		val maxSampleMaskWords: UInt,
		val timestampComputeAndGraphics: Boolean,
		val timestampPeriod: Float,
		val maxClipDistances: UInt,
		val maxCullDistances: UInt,
		val maxCombinedClipAndCullDistances: UInt,
		val discreteQueuePriorities: UInt,
		val pointSizeRange: FloatArray,
		val lineWidthRange: FloatArray,
		val pointSizeGranularity: Float,
		val lineWidthGranularity: Float,
		val strictLines: Boolean,
		val standardSampleLocations: Boolean,
		val optimalBufferCopyOffsetAlignment: ULong,
		val optimalBufferCopyRowPitchAlignment: ULong,
		val nonCoherentAtomSize: ULong
) {
	companion object
}

