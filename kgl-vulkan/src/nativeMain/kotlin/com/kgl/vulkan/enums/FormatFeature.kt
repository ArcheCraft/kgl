/**
 * Copyright [2019] [Dominic Fischer]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.kgl.vulkan.enums

import com.kgl.vulkan.utils.VkFlag
import cvulkan.*

actual enum class FormatFeature(override val value: VkFormatFeatureFlagBits) : VkFlag<FormatFeature> {
	SAMPLED_IMAGE(VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT),

	STORAGE_IMAGE(VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT),

	STORAGE_IMAGE_ATOMIC(VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT),

	UNIFORM_TEXEL_BUFFER(VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT),

	STORAGE_TEXEL_BUFFER(VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT),

	STORAGE_TEXEL_BUFFER_ATOMIC(VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT),

	VERTEX_BUFFER(VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT),

	COLOR_ATTACHMENT(VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT),

	COLOR_ATTACHMENT_BLEND(VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT),

	DEPTH_STENCIL_ATTACHMENT(VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT),

	BLIT_SRC(VK_FORMAT_FEATURE_BLIT_SRC_BIT),

	BLIT_DST(VK_FORMAT_FEATURE_BLIT_DST_BIT),

	SAMPLED_IMAGE_FILTER_LINEAR(VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT),

	SAMPLED_IMAGE_FILTER_CUBIC_IMG(VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG),

	TRANSFER_SRC(VK_FORMAT_FEATURE_TRANSFER_SRC_BIT),

	TRANSFER_DST(VK_FORMAT_FEATURE_TRANSFER_DST_BIT),

	SAMPLED_IMAGE_FILTER_MINMAX_EXT(VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT),

	MIDPOINT_CHROMA_SAMPLES(VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT),

	SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER(VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT),

	SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER(VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT),

	SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT(VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT),

	SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE(VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT),

	DISJOINT(VK_FORMAT_FEATURE_DISJOINT_BIT),

	COSITED_CHROMA_SAMPLES(VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT);

	companion object {
		private val enumLookUpMap: Map<UInt, FormatFeature> =
				enumValues<FormatFeature>().associateBy({ it.value })

		fun fromMultiple(value: VkFormatFeatureFlagBits): VkFlag<FormatFeature> = VkFlag(value)

		fun from(value: VkFormatFeatureFlagBits): FormatFeature = enumLookUpMap[value]!!
	}
}

